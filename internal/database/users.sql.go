// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, isReferral, referralUserId) 
VALUES ($1,$2,$3,$4,$5)
RETURNING id, name, email, isreferral, referraluserid
`

type CreateUserParams struct {
	ID             uuid.UUID
	Name           string
	Email          string
	Isreferral     sql.NullBool
	Referraluserid uuid.NullUUID
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Isreferral,
		arg.Referraluserid,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Isreferral,
		&i.Referraluserid,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
Select id, name, email, isreferral, referraluserid from users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Isreferral,
		&i.Referraluserid,
	)
	return i, err
}
