// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: stocks.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getAllStocks = `-- name: GetAllStocks :many
SELECT id, stock_symbol, valuation 
FROM stocks
`

func (q *Queries) GetAllStocks(ctx context.Context) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getAllStocks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(&i.ID, &i.StockSymbol, &i.Valuation); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStockById = `-- name: GetStockById :one
SELECT id, stock_symbol, valuation FROM stocks where ID = $1
`

func (q *Queries) GetStockById(ctx context.Context, id uuid.UUID) (Stock, error) {
	row := q.db.QueryRowContext(ctx, getStockById, id)
	var i Stock
	err := row.Scan(&i.ID, &i.StockSymbol, &i.Valuation)
	return i, err
}

const getStockBySymbol = `-- name: GetStockBySymbol :one
SELECT id, stock_symbol, valuation FROM stocks where stock_symbol = $1
`

func (q *Queries) GetStockBySymbol(ctx context.Context, stockSymbol string) (Stock, error) {
	row := q.db.QueryRowContext(ctx, getStockBySymbol, stockSymbol)
	var i Stock
	err := row.Scan(&i.ID, &i.StockSymbol, &i.Valuation)
	return i, err
}
