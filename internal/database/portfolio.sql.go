// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: portfolio.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getPortfolioByUserId = `-- name: GetPortfolioByUserId :many
Select id, user_id, stock_id, total_quantity, created_at, updated_at from portfolio where user_id = $1
`

func (q *Queries) GetPortfolioByUserId(ctx context.Context, userID uuid.UUID) ([]Portfolio, error) {
	rows, err := q.db.QueryContext(ctx, getPortfolioByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Portfolio
	for rows.Next() {
		var i Portfolio
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StockID,
			&i.TotalQuantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserStock = `-- name: GetUserStock :one
SELECT id, user_id, stock_id, total_quantity, created_at, updated_at FROM portfolio where user_id = $1 and stock_id = $2
`

type GetUserStockParams struct {
	UserID  uuid.UUID
	StockID uuid.UUID
}

func (q *Queries) GetUserStock(ctx context.Context, arg GetUserStockParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, getUserStock, arg.UserID, arg.StockID)
	var i Portfolio
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StockID,
		&i.TotalQuantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const recordUserPortfolio = `-- name: RecordUserPortfolio :one
INSERT INTO portfolio (
    id,
    user_id,
    stock_id,
    total_quantity,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
ON CONFLICT (user_id, stock_id)
DO UPDATE SET
    total_quantity = portfolio.total_quantity + EXCLUDED.total_quantity,
    updated_at = EXCLUDED.updated_at
RETURNING id, user_id, stock_id, total_quantity, created_at, updated_at
`

type RecordUserPortfolioParams struct {
	ID            uuid.UUID
	UserID        uuid.UUID
	StockID       uuid.UUID
	TotalQuantity string
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) RecordUserPortfolio(ctx context.Context, arg RecordUserPortfolioParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, recordUserPortfolio,
		arg.ID,
		arg.UserID,
		arg.StockID,
		arg.TotalQuantity,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Portfolio
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StockID,
		&i.TotalQuantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
